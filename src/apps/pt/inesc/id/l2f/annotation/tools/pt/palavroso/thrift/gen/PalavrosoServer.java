/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package pt.inesc.id.l2f.annotation.tools.pt.palavroso.thrift.gen;

import java.util.HashMap;

import com.facebook.thrift.*;
import com.facebook.thrift.protocol.*;

public class PalavrosoServer {

	public interface Iface {

		public String process(String input) throws TException;

	}

	public static class Client implements Iface {
		public Client(TProtocol prot)
		{
			this(prot, prot);
		}

		public Client(TProtocol iprot, TProtocol oprot)
		{
			iprot_ = iprot;
			oprot_ = oprot;
		}

		protected TProtocol iprot_;
		protected TProtocol oprot_;

		protected int seqid_;

		public TProtocol getInputProtocol()
		{
			return this.iprot_;
		}

		public TProtocol getOutputProtocol()
		{
			return this.oprot_;
		}

		public String process(String input) throws TException
		{
			send_process(input);
			return recv_process();
		}

		public void send_process(String input) throws TException
		{
			oprot_.writeMessageBegin(new TMessage("process", TMessageType.CALL, seqid_));
			process_args args = new process_args();
			args.input = input;
			args.write(oprot_);
			oprot_.writeMessageEnd();
			oprot_.getTransport().flush();
		}

		public String recv_process() throws TException
		{
			TMessage msg = iprot_.readMessageBegin();
			if (msg.type == TMessageType.EXCEPTION) {
				TApplicationException x = TApplicationException.read(iprot_);
				iprot_.readMessageEnd();
				throw x;
			}
			process_result result = new process_result();
			result.read(iprot_);
			iprot_.readMessageEnd();
			if (result.__isset.success) {
				return result.success;
			}
			throw new TApplicationException(TApplicationException.MISSING_RESULT, "process failed: unknown result");
		}

	}
	public static class Processor implements TProcessor {
		public Processor(Iface iface)
		{
			iface_ = iface;
			processMap_.put("process", new process());
		}

		protected static interface ProcessFunction {
			public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
		}

		private Iface iface_;
		protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

		public boolean process(TProtocol iprot, TProtocol oprot) throws TException
		{
			TMessage msg = iprot.readMessageBegin();
			ProcessFunction fn = processMap_.get(msg.name);
			if (fn == null) {
				TProtocolUtil.skip(iprot, TType.STRUCT);
				iprot.readMessageEnd();
				TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
				oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
				x.write(oprot);
				oprot.writeMessageEnd();
				oprot.getTransport().flush();
				return true;
			}
			fn.process(msg.seqid, iprot, oprot);
			return true;
		}

		private class process implements ProcessFunction {
			
			@SuppressWarnings("all")
			public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
			{
				process_args args = new process_args();
				args.read(iprot);
				iprot.readMessageEnd();
				process_result result = new process_result();
				result.success = iface_.process(args.input);
				result.__isset.success = true;
				oprot.writeMessageBegin(new TMessage("process", TMessageType.REPLY, seqid));
				result.write(oprot);
				oprot.writeMessageEnd();
				oprot.getTransport().flush();
			}

		}

	}

	@SuppressWarnings("serial")
	public static class process_args implements TBase, java.io.Serializable   {
		public String input;

		public final Isset __isset = new Isset();

		public static final class Isset implements java.io.Serializable {
			public boolean input = false;
		}

		public process_args() {
		}

		public process_args(
				String input)
		{
			this();
			this.input = input;
			this.__isset.input = true;
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof process_args)
				return this.equals((process_args)that);
			return false;
		}

		public boolean equals(process_args that) {
			if (that == null)
				return false;

			boolean this_present_input = true && (this.input != null);
			boolean that_present_input = true && (that.input != null);
			if (this_present_input || that_present_input) {
				if (!(this_present_input && that_present_input))
					return false;
				if (!this.input.equals(that.input))
					return false;
			}

			return true;
		}

		public int hashCode() {
			return 0;
		}

		public void read(TProtocol iprot) throws TException {
			TField field;
			iprot.readStructBegin();
			while (true)
			{
				field = iprot.readFieldBegin();
				if (field.type == TType.STOP) { 
					break;
				}
				switch (field.id)
				{
				case -1:
					if (field.type == TType.STRING) {
						this.input = iprot.readString();
						this.__isset.input = true;
					} else { 
						TProtocolUtil.skip(iprot, field.type);
					}
					break;
				default:
					TProtocolUtil.skip(iprot, field.type);
				break;
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
		}

		public void write(TProtocol oprot) throws TException {
			TStruct struct = new TStruct("process_args");
			oprot.writeStructBegin(struct);
			TField field = new TField();
			if (this.input != null) {
				field.name = "input";
				field.type = TType.STRING;
				field.id = -1;
				oprot.writeFieldBegin(field);
				oprot.writeString(this.input);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("process_args(");
			sb.append("input:");
			sb.append(this.input);
			sb.append(")");
			return sb.toString();
		}

	}

	@SuppressWarnings("serial")
	public static class process_result implements TBase, java.io.Serializable   {
		public String success;

		public final Isset __isset = new Isset();
		public static final class Isset implements java.io.Serializable {
			public boolean success = false;
		}

		public process_result() {
		}

		public process_result(
				String success)
		{
			this();
			this.success = success;
			this.__isset.success = true;
		}

		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof process_result)
				return this.equals((process_result)that);
			return false;
		}

		public boolean equals(process_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true && (this.success != null);
			boolean that_present_success = true && (that.success != null);
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (!this.success.equals(that.success))
					return false;
			}

			return true;
		}

		public int hashCode() {
			return 0;
		}

		public void read(TProtocol iprot) throws TException {
			TField field;
			iprot.readStructBegin();
			while (true)
			{
				field = iprot.readFieldBegin();
				if (field.type == TType.STOP) { 
					break;
				}
				switch (field.id)
				{
				case 0:
					if (field.type == TType.STRING) {
						this.success = iprot.readString();
						this.__isset.success = true;
					} else { 
						TProtocolUtil.skip(iprot, field.type);
					}
					break;
				default:
					TProtocolUtil.skip(iprot, field.type);
				break;
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();
		}

		public void write(TProtocol oprot) throws TException {
			TStruct struct = new TStruct("process_result");
			oprot.writeStructBegin(struct);
			TField field = new TField();

			if (this.__isset.success) {
				if (this.success != null) {
					field.name = "success";
					field.type = TType.STRING;
					field.id = 0;
					oprot.writeFieldBegin(field);
					oprot.writeString(this.success);
					oprot.writeFieldEnd();
				}
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

		public String toString() {
			StringBuilder sb = new StringBuilder("process_result(");
			sb.append("success:");
			sb.append(this.success);
			sb.append(")");
			return sb.toString();
		}

	}

}
